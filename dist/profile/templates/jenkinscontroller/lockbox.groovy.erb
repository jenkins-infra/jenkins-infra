#!/usr/bin/env groovy

import jenkins.model.*
import hudson.security.*
import hudson.security.csrf.*
import hudson.model.Item
import org.jenkinsci.plugins.matrixauth.PermissionEntry

def instance = Jenkins.instance

instance.numExecutors = 0

println 'Checking authentication status'
if (instance.securityRealm == SecurityRealm.NO_AUTHENTICATION) {
  println "Enabling LDAP-based authentication"

  // public LDAPSecurityRealm(String server, String rootDN, String userSearchBase, String userSearch, String groupSearchBase, String groupSearchFilter, LDAPGroupMembershipStrategy groupMembershipStrategy, String managerDN, Secret managerPasswordSecret, boolean inhibitInferRootDN, boolean disableMailAddressResolver, CacheConfiguration cache, EnvironmentProperty[] environmentProperties, String displayNameAttributeName, String mailAddressAttributeName, IdStrategy userIdStrategy, IdStrategy groupIdStrategy) {

  LDAPSecurityRealm realm  = new LDAPSecurityRealm(
    "<%= @ldap_url %>",
    "<%= @ldap_dn %>",
    "ou=people", /* hard-coding this to our schema */
    "cn={0}",    /* -- */
    "ou=groups", /* -- */
    "",          /* -- */
    new jenkins.security.plugins.ldap.FromGroupSearchLDAPGroupMembershipStrategy(''),
    "<%= @ldap_admin_dn %>",
    new hudson.util.Secret("<%= @ldap_admin_password %>"),
    false,
    false,
    new LDAPSecurityRealm.CacheConfiguration(100, 300), /* cache 100 items for 5 minutes */
    null, /* no environmentProperties */
    "displayname", /* hard-coding this to our schema */
    "email",       /* -- */
    IdStrategy.CASE_INSENSITIVE,
    IdStrategy.CASE_INSENSITIVE,
  )

  instance.securityRealm = realm
}

/* Every time we run, it's worth re-defining our authorization strategy to make
 * sure that it is correct
 */
AuthorizationStrategy strategy = new GlobalMatrixAuthorizationStrategy()

<%if @anonymous_access %>
[
    Jenkins.READ,
    Item.READ,
].each { permission ->
    strategy.add(permission, PermissionEntry.user('anonymous'))
}
<%end%>

<% @admin_ldap_groups.each do |group|%>
strategy.add(Jenkins.ADMINISTER, PermissionEntry.group('<%= group %>'))
<%end%>

instance.authorizationStrategy = strategy

instance.save()
