<%- if @jcasc['cloud_agents'] && @jcasc['cloud_agents']['disabled'].to_s != "true" -%>
jenkins:
  clouds:
  <%- if @jcasc['cloud_agents']['azure_vm_agents'] && @jcasc['cloud_agents']['azure_vm_agents']['clouds'] -%>
  <%- @jcasc['cloud_agents']['azure_vm_agents']['clouds'].each do |cloudname, cloudsetup| -%>
  - azureVM:
      azureCredentialsId: "<%= cloudsetup['azureCredentialsId'] %>"
      name: "<%= cloudname %>"
      deploymentTimeout: 1200
      existingResourceGroupName: "<%= cloudsetup['resourceGroup'] %>"
      resourceGroupReferenceType: "existing"
      maxVirtualMachinesLimit: <%= cloudsetup['maxInstances'] %>
      vmTemplates:
    <%- @jcasc['cloud_agents']['azure_vm_agents']['agent_definitions'].each do |agent| -%>
      - agentWorkspace: "<%= agent['agentDir'] ? agent['agentDir'] : @jcasc['agents_setup'][agent['os'].to_s]['agentDir'] %>"
        <%- if agent['os'].to_s == 'windows' -%>
        executeInitScriptAsRoot: false
        # Escape '$' in JCasc with '^' - ref. https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/features/secrets.adoc#passing-secrets-through-variables
        initScript: |
          # Setup datadog
          (Get-Content C:\ProgramData\Datadog\datadog.yaml -Raw) -Replace 'api_key:', 'api_key: <%= @jcasc['datadog_api_key'] %>' | Set-Content C:\ProgramData\Datadog\datadog.yaml
          & "$env:ProgramFiles\Datadog\Datadog Agent\bin\agent.exe" restart
            <%- if agent['launcher'] && agent['launcher'] == "inbound" -%>
          # Setup inbound agent
          $jenkinsServerUrl = $args[0] # Always ends with a '/'
          $agentName = $args[1]
          $agentSecret = $args[2]
          $jenkinsWorkDir = '<%= agent['agentDir'] ? agent['agentDir'] : @jcasc['agents_setup'][agent['os'].to_s]['agentDir'] %>'
          # Download the service wrapper
          $agentJar =  '{0}jnlpJars/agent.jar' -f $jenkinsServerUrl

          $wrapperExec = '{0}\jenkins-agent.exe' -f $jenkinsWorkDir
          $configFile = '{0}\jenkins-agent.xml'  -f $jenkinsWorkDir
          $agentExeConfig = '{0}\jenkins-agent.exe.config' -f $jenkinsWorkDir

          mkdir $jenkinsWorkDir
          $wc = New-Object System.Net.WebClient
          $wc.DownloadFile('https://github.com/winsw/winsw/releases/download/v2.12.0/WinSW.NET461.exe', $wrapperExec)
          $wc.DownloadFile('https://raw.githubusercontent.com/Azure/jenkins/master/agents_scripts/jenkins-slave.exe.config', $agentExeConfig)
          $wc.DownloadFile('https://raw.githubusercontent.com/Azure/jenkins/master/agents_scripts/jenkins-slave.xml', $configFile)
          # Prepare config
          Write-Output 'Executing agent process...'
          $configExec = '<%= agent['agentJavaBin'] ? agent['agentJavaBin'] : @jcasc['agents_setup'][agent['os'].to_s]['agentJavaBin'] %>'
          $configArgs = '-jnlpUrl "{0}/computer/{1}/jenkins-agent.jnlp" -workDir {2}' -f $jenkinsserverurl, $agentName, $jenkinsWorkDir
          if ($agentSecret) {
              $configArgs += " -secret `"$agentSecret`""
          }
          (Get-Content $configFile).replace('@JAVA@', $configExec) | Set-Content $configFile
          (Get-Content $configFile).replace('@ARGS@', $configArgs) | Set-Content $configFile
          (Get-Content $configFile).replace('@SLAVE_JAR_URL', $agentJar) | Set-Content $configFile
          # Install the service
          & $wrapperExec install
          & $wrapperExec start
          <%- end -%>
        <%- else -%>
        executeInitScriptAsRoot: true
        # Escape '$' in JCasc with '^' - ref. https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/features/secrets.adoc#passing-secrets-through-variables
        initScript: |
          #!/bin/sh
          set -eux

          # Setup Datadog service
          (
            systemctl stop datadog-agent.service
            mkdir -p /var/log/datadog /etc/datadog-agent
            sed 's/api_key:.*/api_key: <%= @jcasc['datadog_api_key'] %>/' /etc/datadog-agent/datadog.yaml.example > /etc/datadog-agent/datadog.yaml
            sed -i 's/# site:.*/site: datadoghq.com/' /etc/datadog-agent/datadog.yaml
            chown dd-agent:dd-agent /etc/datadog-agent/datadog.yaml
            chmod 640 /etc/datadog-agent/datadog.yaml
            chown dd-agent:dd-agent /var/log/datadog
            chmod 770 /var/log/datadog
            systemctl daemon-reload
            systemctl enable datadog-agent.service
            systemctl start datadog-agent.service
          ) 2>&1 | tee /var/log/agent-init-datadog.log
          <%- if agent['launcher'] && agent['launcher'] == "inbound" -%>
          # Setup Jenkins Agent Service
          (
            # Argument provided by the Azure-VM plugin
            export JENKINS_URL="^${1}" # Always ends with a '/'
            export AGENT_NAME="^${2}"
            export AGENT_SECRET="^${3}"

            export USER=jenkins
            export AGENT_WORKDIR='<%= agent['agentDir'] ? agent['agentDir'] : @jcasc['agents_setup'][agent['os'].to_s]['agentDir'] %>'
            export AGENT_JAR="^${AGENT_WORKDIR}/agent.jar"
            export AGENT_SECRETFILE="^${AGENT_WORKDIR}/agent-secret"
            export AGENT_URL="^${JENKINS_URL}computer/^${AGENT_NAME}/jenkins-agent.jnlp"
            export JENKINS_JAVA_OPTS='<%= agent['agentJavaOpts'] ? agent['agentJavaOpts'] : @jcasc['agents_setup'][agent['os'].to_s]['agentJavaOpts'] %>'
            export ARTIFACT_CACHING_PROXY_PROVIDER='azure'
            export JAVA_HOME='<%= agent['javaHome'] ? agent['javaHome'] : @jcasc['agents_setup'][agent['os'].to_s]['javaHome'] %>'
            export JENKINS_JAVA_BIN='<%= agent['agentJavaBin'] ? agent['agentJavaBin'] : @jcasc['agents_setup'][agent['os'].to_s]['agentJavaBin'] %>'

            mkdir -p "^${AGENT_WORKDIR}"
            chown "^${USER}:^${USER}" "^${AGENT_WORKDIR}"
            curl --silent --show-error --location --output "^${AGENT_JAR}" "^${JENKINS_URL}jnlpJars/agent.jar"
            touch "^${AGENT_SECRETFILE}"
            echo "^${AGENT_SECRET}" > "^${AGENT_SECRETFILE}"
            cat <<- EOF >/etc/systemd/system/jenkins-agent.service
            [Unit]
            Description=Jenkins Inbound Agent
            Wants=network.target
            After=network.target

            [Service]
            ExecStart=^${JENKINS_JAVA_BIN} ^${JENKINS_JAVA_OPTS} -jar ^${AGENT_JAR} -jnlpUrl ^${AGENT_URL} -secret @^${AGENT_SECRETFILE} -workDir ^${AGENT_WORKDIR}
            User=^${USER}
            WorkingDirectory=^${AGENT_WORKDIR}
            Restart=on-failure
            RestartSec=10
            Environment="JAVA_HOME=^${JAVA_HOME}"
            Environment="ARTIFACT_CACHING_PROXY_PROVIDER=^${ARTIFACT_CACHING_PROXY_PROVIDER}"
            Environment="PATH=^${JAVA_HOME}/bin:<%= @jcasc['agents_setup']['ubuntu']['path'] %>"

            [Install]
            WantedBy=multi-user.target
          EOF

            systemctl daemon-reload
            systemctl enable jenkins-agent
            systemctl start jenkins-agent || systemctl status jenkins-agent
          ) 2>&1 | tee /var/log/agent-init-jenkins.log
          <%-end -%>

          # Remove jenkins user from sudoers
          rm -f /etc/sudoers.d/90-cloud-init-users
        <%- end -%>
        <%- if agent['launcher'] && agent['launcher'] == "inbound" -%>
        launcher: "inbound"
        <%- else -%>
        launcher: "ssh"
        <%- end -%>
        credentialsId: "<%= agent['credentialsId'] %>"
        diskType: "managed"
        encryptionAtHost: true
        doNotUseMachineIfInitFails: true
        enableMSI: false
        enableUAMI: false
        ephemeralOSDisk: "<%= agent['ephemeralOSDisk'] ? agent['ephemeralOSDisk'] : false %>"
        existingStorageAccountName: "<%= cloudsetup['storageAccount'] %>"
        storageAccountNameReferenceType: "existing"
        storageAccountType: "Standard_LRS"
        imageReference:
          galleryImageDefinition: "<%= agent['imageDefinition'] %>"
          galleryImageVersion: "<%= @jcasc['agent_images']['azure_vms_gallery_image']['version'] %>"
          galleryName: "prod_packer_images"
          galleryResourceGroup: "prod-packer-images"
          gallerySubscriptionId: "<%= @jcasc['agent_images']['azure_vms_gallery_image']['subscription_id'] %>"
        imageTopLevelType: "advanced"
        installDocker: false
        installGit: false
        installMaven: false
        javaPath: "<%= agent['agentJavaBin'] ? agent['agentJavaBin'] : @jcasc['agents_setup'][agent['os'].to_s]['agentJavaBin'] %>"
        jvmOptions: "<%= agent['agentJavaOpts'] ? agent['agentJavaOpts'] : @jcasc['agents_setup'][agent['os'].to_s]['agentJavaOpts'] %>"
        labels: "<%= agent['os'].to_s + "-" + agent['os_version'].to_s %> <%= agent['architecture'].to_s %> azure vm <%= agent['labels'].join(' ') %> <%= cloudname %>"
        location: "<%= agent['location'] %>"
        noOfParallelJobs: 1
        osDiskSize: <%= agent['osDiskSize'] ? agent['osDiskSize'] : @jcasc['agents_setup'][agent['os'].to_s]['osDiskSize'] %>
        osDiskStorageAccountType: <%= agent['ephemeralOSDisk'] ? "Standard_LRS" : (agent['osDiskStorageAccountType'] ? agent['osDiskStorageAccountType'] : @jcasc['agents_setup'][agent['os'].to_s]['osDiskStorageAccountType']) %>
        osType: "<%= agent['os'].to_s == "windows" ? 'Windows' : 'Linux' %>"
      <%- if agent['idleTerminationMinutes'] -%>
        retentionStrategy:
          azureVMCloudRetentionStrategy:
            idleTerminationMinutes: "<%= agent['idleTerminationMinutes'] %>"
      <%- else -%>
        retentionStrategy: "azureVMCloudOnce"
      <%- end -%>
        shutdownOnIdle: false
        spotInstance: <%= cloudsetup['disableSpot'] ? false : (agent['spot'] ? true : false) %>
        templateDesc: "Dynamically provisioned <%= agent['description'] %> machine"
        templateDisabled: false
        templateName: "<%= agent['name'] %>"
        usageMode: "<%= agent['useAsMuchAsPossible'] == true ? 'NORMAL' : 'EXCLUSIVE' %>"
        virtualMachineSize: "<%= agent['instanceType'] %>"
        <%- if agent['maxInstances'] -%>
        maxVirtualMachinesLimit: <%= agent['maxInstances'] %>
        <%- end -%>
      <%- if agent['usePrivateIP'] -%>
        usePrivateIP: true
        virtualNetworkName: "<%= cloudsetup['virtualNetworkName'] %>"
        virtualNetworkResourceGroupName: "<%= cloudsetup['virtualNetworkResourceGroupName'] %>"
        subnetName: "<%= cloudsetup['subnetName'] %>"
      <%- else -%>
        usePrivateIP: false
      <%- end -%>
    <%- end -%>
  <%- end -%>
  <%- end -%>
  <%- if @jcasc['cloud_agents']['azure-container-agents'] && !@jcasc['cloud_agents']['azure-container-agents'].empty? -%>
    <%- @jcasc['cloud_agents']['azure-container-agents'].each do |aci_cloud_name, aci_cloud_setup| -%>
  - aci:
      credentialsId: "<%= aci_cloud_setup['credentialsId'] %>"
      name: "<%= aci_cloud_name %>"
      resourceGroup: "<%= aci_cloud_setup['resourceGroup'] %>"
      templates:
      <%- aci_cloud_setup['agent_definitions'].each do |agent| -%>
      - command: "<%= agent['command'] %>"
        cpu: "<%= agent['cpus'] %>"
        image: "<%= @jcasc['agent_images']['container_images']['jnlp-' + agent['name'].to_s] %>"
        label: "<%= agent['os'] %> azure aci container <%= agent['labels'].join(' ') %>"
        memory: "<%= agent['memory'] %>"
        name: "aci-<%= agent['name'] %>"
        osType: "<%= agent['os'] == "windows" ? 'Windows' : 'Linux' %>"
        retentionStrategy: "containerOnce"
        rootFs: "<%= agent['agentDir'] ? agent['agentDir'] : @jcasc['agents_setup'][agent['os'].to_s]['agentDir'] %>"
        timeout: 60
        # Please note that envVars are specified differently than permanent or Kubernetes agents
        envVars:
          <%- agentJavaOpts = agent['agentJavaOpts'] ? agent['agentJavaOpts'] : @jcasc['agents_setup'][agent['os'].to_s]['agentJavaOpts'] -%>
          <%- jenkinsJavaOpts = "" -%>
          <%- if agent['os'] == "windows" -%>
            <%-# On Windows, due to https://github.com/jenkinsci/docker-inbound-agent/pull/227, each flag of the java opts string is wrapped with litteral double quote to avoid powershell interpolation  -%>
            <%- agentJavaOpts.split(' ').each do |optFlag| -%>
              <%- jenkinsJavaOpts += '"' + optFlag + '"' -%>
            <%- end -%>
          <%- else -%>
            <%-# On Linux, we can pass the java opts string "as it" to the shell -%>
            <%- jenkinsJavaOpts = agentJavaOpts -%>
          <%- end -%>
          - key: "JENKINS_JAVA_OPTS"
            value: >-
              <%= jenkinsJavaOpts %>
          - key: "JENKINS_JAVA_BIN"
            value: "<%= agent['agentJavaBin'] ? agent['agentJavaBin'] : @jcasc['agents_setup'][agent['os'].to_s]['agentJavaBin'] %>"
          - key: "ARTIFACT_CACHING_PROXY_PROVIDER"
            value: "azure"
      <%- end -%>
    <%- end -%>
  <%- end -%>
  <%- if @jcasc['cloud_agents']['kubernetes'] && !@jcasc['cloud_agents']['kubernetes'].empty? -%>
    <%- @jcasc['cloud_agents']['kubernetes'].each do |k8s_name, k8s_setup| -%>
    <%- if k8s_setup['enabled'].to_s == "true" -%>
  - kubernetes:
      name: "<%= k8s_name %>"
      containerCap: <%= k8s_setup['max_capacity'] %>
      credentialsId: "<%= k8s_setup['credentialsId'] %>"
      directConnection: true
      namespace: "<%= k8s_setup['defaultNamespace'] %>"
      serverUrl: "<%= k8s_setup['url'] %>"
      <%- if k8s_setup['serverCertificate'] -%>
      serverCertificate: |
        <%- k8s_setup['serverCertificate'].split("\n").each do |line| -%>
          <%= line %>
        <%- end -%>
      <%- end -%>
      <%- if k8s_setup['agent_definitions'] -%>
      templates:
      <%- k8s_setup['agent_definitions'].each do |agent| -%>
        - containers:
          - alwaysPullImage: false
            image: "<%= agent['imageName'] && !agent['imageName'].empty? ? @jcasc['agent_images']['container_images'][agent['imageName']] : @jcasc['agent_images']['container_images'][agent['name']] %>"
            # Please note that envVars are specified differently than permanent or ACI agents
            envVars:
              - envVar:
                  key: "JENKINS_JAVA_OPTS"
                  value: "<%= agent['agentJavaOpts'] ? agent['agentJavaOpts'] : @jcasc['agents_setup']['ubuntu']['agentJavaOpts'] %>"
              - envVar:
                  key: "JENKINS_JAVA_BIN"
                  value: "<%= agent['agentJavaBin'] ? agent['agentJavaBin'] : @jcasc['agents_setup']['ubuntu']['agentJavaBin'] %>"
              - envVar:
                  key: "JAVA_HOME"
                  value: "<%= agent['javaHome'] ? agent['javaHome'] : @jcasc['agents_setup']['ubuntu']['javaHome'] %>"
              - envVar:
                  key: "PATH"
                  value: "<%= agent['javaHome'] ? agent['javaHome'] : @jcasc['agents_setup']['ubuntu']['javaHome'] %>/bin:<%= @jcasc['agents_setup']['ubuntu']['path'] %>"
              - envVar:
                  key: "ARTIFACT_CACHING_PROXY_PROVIDER"
                  value: "<%= k8s_setup['provider'] %>"
            livenessProbe:
              failureThreshold: 0
              initialDelaySeconds: 0
              periodSeconds: 0
              successThreshold: 0
              timeoutSeconds: 0
            name: "jnlp"
            command: "/usr/local/bin/jenkins-agent"
            args: ""
            resourceLimitCpu: "<%= agent['cpus'] %>"
            resourceLimitMemory: "<%= agent['memory'] %>G"
            resourceRequestCpu: "<%= agent['cpus'] %>"
            resourceRequestMemory: "<%= agent['memory'] %>G"
            workingDir: "<%= agent['agentDir'] ? agent['agentDir'] : @jcasc['agents_setup']['ubuntu']['agentDir'] %>"
          label: "container kubernetes <%= k8s_name %> <%= agent['labels'] ? agent['labels'].join(' ') : '' %>"
          name: "<%= agent['name'] %>"
        <%- if agent['imagePullSecrets'] -%>
          imagePullSecrets:
          - name: "<%= agent['imagePullSecrets'] %>"
        <%- end -%>
          slaveConnectTimeout: 100
        <%- if agent['nodeSelector'] -%>
          nodeSelector: "<%= agent['nodeSelector'] %>"
        <%- end -%>
        <%- if agent['tolerations'] -%>
          yaml: |-
            apiVersion: "v1"
            kind: "Pod"
            spec:
              tolerations:
                <%- agent['tolerations'].each do |toleration| -%>
                - key: "<%= toleration["key"] %>"
                  operator: "<%= toleration["operator"] %>"
                  value: "<%= toleration["value"] %>"
                  effect: "<%= toleration["effect"] %>"
                <%- end -%>
          <%- end -%>
          yamlMergeStrategy: "override"
          volumes:
          - emptyDirVolume:
              memory: true
              mountPath: "/tmp"
          - emptyDirVolume:
              memory: false
              mountPath: "/home/jenkins/.m2/repository"
      <%- end -%>
      <%- end -%>
    <%- end -%>
    <%- end -%>
  <%- end -%>
<%- end -%>
