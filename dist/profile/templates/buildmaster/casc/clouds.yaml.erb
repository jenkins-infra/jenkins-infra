---
jenkins:
  clouds:
<%- if @cloud_agents["azure-vm-agents"] && !@cloud_agents["azure-vm-agents"].empty? -%>
<%- # Creating one cloud per template because there is no "maxVirtualMachinesLimit" directive applicable for a single template -%>
  <%- @cloud_agents["azure-vm-agents"]["agent_definitions"].each do |agent| -%>
  - azureVM:
      azureCredentialsId: "<%= @cloud_agents["azure-vm-agents"]["azureCredentialsId"] %>"
      cloudName: "azure-<%= agent["name"] %>"
      deploymentTimeout: 1200
      maxVirtualMachinesLimit: <%= agent["maxInstances"] %>
      resourceGroupReferenceType: "existing"
      existingResourceGroupName: "<%= @cloud_agents["azure-vm-agents"]["resource_group"] %>"
      vmTemplates:
      - agentLaunchMethod: "SSH"
        agentWorkspace: "<%= @agents_setup[agent["os"]]["agentDir"] %>"
        credentialsId: "<%= agent["credentialsId"] %>"
        diskType: "managed"
        doNotUseMachineIfInitFails: true
        enableMSI: false
        enableUAMI: false
        ephemeralOSDisk: <%= agent["useEphemeralOSDisk"].nil? ? true : agent["useEphemeralOSDisk"] %>
        existingStorageAccountName: "<%= agent["storageAccount"] %>"
        storageAccountNameReferenceType: "existing"
        storageAccountType: "Standard_LRS"
        imageReference:
          galleryImageDefinition: "<%= agent["imageDefinition"] %>"
          galleryImageVersion: "<%= @agent_images["azure_vms_gallery_image"]["version"] %>"
          galleryName: "prod_packer_images"
          galleryResourceGroup: "prod-packer-images"
          gallerySubscriptionId: "<%= @agent_images["azure_vms_gallery_image"]["subscription_id"] %>"
        imageTopLevelType: "advanced"
        installDocker: false
        installGit: false
        installMaven: false
        javaPath: "<%= agent["os"] == "windows" ? @agent_cli_tools['jdk']['jdk11']['windows'] : @agent_cli_tools['jdk']['jdk11']['linux'] %>/bin/java"
        labels: "<%= agent["os"] %> <%= agent["architecture"] %> azure vm <%= agent["labels"].join(' ') %>"
        location: "<%= agent["location"] %>"
        noOfParallelJobs: 1
        osDiskSize: 0
        osType: "<%= agent["os"] == "windows" ? 'Windows' : 'Linux' %>"
        preInstallSsh: false
        retentionStrategy:
          azureVMCloudRetentionStrategy:
            idleTerminationMinutes: "<%= agent["idleTerminationMinutes"] %>"
        shutdownOnIdle: false
        templateDesc: "Dynamically provisioned <%= agent["description"] %> machine"
        templateDisabled: false
        templateName: "<%= agent["name"] %>"
        usageMode: "<%= agent["useAsMuchAsPosible"] == true ? 'NORMAL' : 'EXCLUSIVE' %>"
        virtualMachineSize: "<%= agent["instanceType"] %>"
        <%- if agent["usePrivateIP"] -%>
        usePrivateIP: true
        virtualNetworkName: "<%= agent["virtualNetworkName"] %>"
        virtualNetworkResourceGroupName: "<%= agent["virtualNetworkResourceGroupName"] %>"
        subnetName: "<%= agent["subnetName"] %>"
        <%- else -%>
        usePrivateIP: false
        <%- end -%>
    <%- end -%>
<%- end -%>
<%- if @cloud_agents["azure-container-agents"] && !@cloud_agents["azure-container-agents"].empty? -%>
  <%- @cloud_agents["azure-container-agents"].each do |aci_cloud_name, aci_cloud_setup| -%>
  - aci:
      credentialsId: "<%= aci_cloud_setup["credentialsId"] %>"
      name: "<%= aci_cloud_name %>"
      resourceGroup: "<%= aci_cloud_setup["resource_group"] %>"
      templates:
      <%- aci_cloud_setup["agent_definitions"].each do |agent| -%>
      - command: "<%= agent["command"] %>"
        cpu: "<%= agent["cpus"] %>"
        image: "<%= @agent_images["container_images"]['jnlp-' + agent["name"].to_s] %>"
        label: "<%= agent["os"] %> azure aci container <%= agent["labels"].join(' ') %>"
        memory: "<%= agent["memory"] %>"
        name: "aci-<%= agent["name"] %>"
        osType: "<%= agent["os"] == "windows" ? 'Windows' : 'Linux' %>"
        retentionStrategy: "containerOnce"
        rootFs: "<%= @agents_setup[agent["os"].to_s]["agentDir"] %>"
        timeout: 60
      <%- end -%>
  <%- end -%>
<%- end -%>
<%- if @cloud_agents["ec2"] && !@cloud_agents["ec2"].empty? -%>
  <%- @cloud_agents["ec2"].each do |ec2_cloud_name, ec2_cloud_setup| -%>
  - amazonEC2:
      cloudName: <%= ec2_cloud_name %>
      credentialsId: "<%= ec2_cloud_setup["credentialsId"] %>"
      <%- $maxEC2Vms = 0; ec2_cloud_setup["agent_definitions"].each do |agent| -%>
        <%- $maxEC2Vms = agent["maxInstances"] + $maxEC2Vms -%>
      <%- end -%>
      instanceCapStr: "<%= $maxEC2Vms %>"
      region: "<%= ec2_cloud_setup["region"] %>"
      sshKeysCredentialsId: "<%= ec2_cloud_setup["sshKeysCredentialsId"] %>"
      useInstanceProfileForCredentials: false
      templates:
      <%- ec2_cloud_setup["agent_definitions"].each do |agent| -%>
      - ami: "<%= @agent_images["ec2_amis"][agent["os"].to_s + "-" + agent["architecture"].to_s] %>"
        amiOwners: "200564066411"
        amiType:
          unixData:
            sshPort: "22"
        associatePublicIp: true
        connectBySSHProcess: false
        connectionStrategy: PUBLIC_DNS
        deleteRootOnTermination: true
        description: "<%= agent["description"] %>"
        ebsEncryptRootVolume: DEFAULT
        ebsOptimized: false
        hostKeyVerificationStrategy: ACCEPT_NEW
        idleTerminationMinutes: "<%= agent["idleTerminationMinutes"] %>"
        instanceCapStr: "<%= agent["maxInstances"] %>"
        labelString: "<%= agent["os"] %> <%= agent["architecture"] %> aws ec2 vm <%= agent["labels"].join(' ') %>"
        launchTimeoutStr: "1000"
        maxTotalUses: 1 # Throw away the VMs after a build
        minimumNumberOfInstances: 0
        minimumNumberOfSpareInstances: 0
        mode: <%= agent["useAsMuchAsPosible"] == true ? 'NORMAL' : 'EXCLUSIVE' %>
        monitoring: false
        numExecutors: 1
        remoteAdmin: "<%= @agents_setup[agent["os"].to_s]["remoteAdmin"] %>"
        remoteFS: "<%= @agents_setup[agent["os"].to_s]["agentDir"] %>"
        securityGroups: "ci-agents"
        spotConfig:
          fallbackToOndemand: true
          useBidPrice: false
        stopOnTerminate: false
        t2Unlimited: false
        tags:
        - name: "architecture"
          value: "<%= agent["architecture"] %>"
        - name: "os"
          value: "<%= agent["os"] %>"
        - name: "jenkins"
          value: "ci.jenkins.io"
        tenancy: Default
        type: <%= agent["instanceType"] %>
        tmpDir: "<%= @agents_setup[agent["os"]]["tempDir"] %>"
        useEphemeralDevices: true
      <%- end -%>
  <%- end -%>
<%- end -%>
<%- if @cloud_agents["kubernetes"] && !@cloud_agents["kubernetes"].empty? -%>
  <%- @cloud_agents["kubernetes"].each do |k8s_name, k8s_setup| -%>
  - kubernetes:
      name: "<%= k8s_name %>"
      containerCap: <%= k8s_setup["max_capacity"] %>
      credentialsId: "<%= k8s_setup["credentialsId"] %>"
      directConnection: true
      namespace: "jenkins-agents"
      serverUrl: "<%= k8s_setup["url"] %>"
      <%- if k8s_setup["serverCertificate"] -%>
      serverCertificate: |
        <%- k8s_setup["serverCertificate"].split("\n").each do |line| -%>
          <%= line %>
        <%- end -%>
      <%- end -%>
      templates:
      <%- k8s_setup["agent_definitions"].each do |agent| -%>
        - containers:
          - alwaysPullImage: false
            image: "<%= @agent_images["container_images"][agent["name"]] %>"
            livenessProbe:
              failureThreshold: 0
              initialDelaySeconds: 0
              periodSeconds: 0
              successThreshold: 0
              timeoutSeconds: 0
            name: "jnlp"
            command: "/usr/local/bin/jenkins-agent"
            args: ""
            resourceLimitCpu: "<%= agent["cpus"] %>"
            resourceLimitMemory: "<%= agent["memory"] %>G"
            resourceRequestCpu: "<%= agent["cpus"] %>"
            resourceRequestMemory: "<%= agent["memory"] %>G"
            workingDir: "/home/jenkins"
          label: "container kubernetes <%= agent["labels"] ? agent["labels"].join(' ') : '' %>"
          name: "<%= agent["name"] %>"
          slaveConnectTimeout: 100
          yamlMergeStrategy: "override"
      <%- end -%>
  <%- end -%>
<%- end -%>
