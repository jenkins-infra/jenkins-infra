---
lookup_options:
  "^profile::jenkinscontroller::jcasc$":
    merge:
      strategy: deep
      merge_hash_arrays: true
  "^letsencrypt":
    merge:
      strategy: deep
      merge_hash_arrays: true

profile::jenkinscontroller::letsencrypt: false
# Per-host Datadog configuration
datadog_agent::host: "vagrant.local"
datadog_agent::non_local_traffic: true # Allow jenkins container to contact the agent for metrics
datadog_agent::apm_enabled: true
datadog_agent::apm_non_local_traffic: true # Allow jenkins container to contact the agent for traces and logs
datadog_agent::agent_extra_options:
  bind_host: "0.0.0.0" # All hosts interfaces to allow container access
profile::jenkinscontroller::ci_fqdn: 'localhost'
profile::jenkinscontroller::ci_resource_domain: 'assets.localhost'
profile::jenkinscontroller::proxy_port: 443
profile::jenkinscontroller::groovy_init_enabled: false
profile::jenkinscontroller::memory_limit: '14g'
# Non functional key used to factorize code with a YAML anchor
x-inbound-agent-init-shell-script: &InboundAgentInitShellScript
  - "#!/bin/bash"
  - "set -eux"
  - "JENKINS_URL=$1"
  - "AGENT_NAME=$2"
  - "SECRET=$3"
  - "export USER=jenkins"
  - "systemctl stop datadog-agent.service"
  - "mkdir -p /home/$USER/inbound-agent /var/log/datadog /etc/datadog-agent"
  - "chown $USER:$USER /home/$USER/inbound-agent"
  - "("
  - "  cd /home/$USER/inbound-agent || exit"
  - "  curl -O \"$JENKINS_URL/jnlpJars/agent.jar\""
  - "  echo \"^${SECRET}\" > agent-secret"
  - "  curl -O https://raw.githubusercontent.com/jenkinsci/azure-vm-agents-plugin/HEAD/docs/init-scripts/systemd-unit.service"
  - "  export AGENT_URL=\"$JENKINS_URL/computer/$AGENT_NAME/jenkins-agent.jnlp\""
  - "  envsubst < systemd-unit.service > /etc/systemd/system/jenkins-agent.service"
  - "  rm -f systemd-unit.service"
  - "  sudo systemctl daemon-reload"
  - "  sudo systemctl enable jenkins-agent"
  - "  sudo systemctl start jenkins-agent || sudo systemctl status jenkins-agent"
  - ") |& tee /home/$USER/inbound-agent/agent-init-script.log"
  - "sed 's/api_key:.*/api_key: SuperSecretEncryptedInProduction/' /etc/datadog-agent/datadog.yaml.example > /etc/datadog-agent/datadog.yaml"
  - "sed -i 's/# site:.*/site: datadoghq.com/' /etc/datadog-agent/datadog.yaml"
  - "chown dd-agent:dd-agent /etc/datadog-agent/datadog.yaml"
  - "chmod 640 /etc/datadog-agent/datadog.yaml"
  - "chown dd-agent:dd-agent /var/log/datadog"
  - "chmod 770 /var/log/datadog"
  - "systemctl start datadog-agent.service"
  - "rm -f /etc/sudoers.d/90-cloud-init-users" # Remove jenkins user from admins
# Non functionnal key used to factorize code with a YAML anchor
x-inbound-agent-init-powershell-script: &InboundAgentInitPowershellScript
  - "# Setup datadog"
  - "(Get-Content C:\\ProgramData\\Datadog\\datadog.yaml -Raw) -Replace 'api_key:', 'api_key: 15c1d29da910e04b4673eda9f0607316' | Set-Content C:\\ProgramData\\Datadog\\datadog.yaml"
  - "& \"$env:ProgramFiles\\Datadog\\Datadog Agent\\bin\\agent.exe\" restart"
  - "# Setup inbound agent"
  - "$jenkinsserverurl = $args[0]"
  - "$vmname = $args[1]"
  - "$secret = $args[2]"
  - "# Download the service wrapper"
  - "$wrapperExec = 'c:\\jenkins\\jenkins-agent.exe'"
  - "$configFile = 'c:\\jenkins\\jenkins-agent.xml'"
  - "$agentSource = $jenkinsserverurl + 'jnlpJars/agent.jar'"
  - "mkdir C:\\jenkins"
  - "$wc = New-Object System.Net.WebClient"
  - "$wc.DownloadFile('https://github.com/winsw/winsw/releases/download/v2.12.0/WinSW.NET461.exe', $wrapperExec)"
  - "$wc.DownloadFile('https://raw.githubusercontent.com/Azure/jenkins/master/agents_scripts/jenkins-slave.exe.config', 'c:\\jenkins\\jenkins-agent.exe.config')"
  - "$wc.DownloadFile('https://raw.githubusercontent.com/Azure/jenkins/master/agents_scripts/jenkins-slave.xml', $configFile)"
  - "# Prepare config"
  - "Write-Output 'Executing agent process...'"
  - "$configExec = 'C:\\tools\\jdk-11\\bin\\java'"
  - "$configArgs = '-jnlpUrl \"{0}/computer/{1}/jenkins-agent.jnlp\" -workDir C:\\jenkins\\workDir' -f $jenkinsserverurl, $vmname"
  - "if ($secret) {"
  - "    $configArgs += \" -secret `\"$secret`\"\""
  - "}"
  - "(Get-Content $configFile).replace('@JAVA@', $configExec) | Set-Content $configFile"
  - "(Get-Content $configFile).replace('@ARGS@', $configArgs) | Set-Content $configFile"
  - "(Get-Content $configFile).replace('@SLAVE_JAR_URL', $agentSource) | Set-Content $configFile"
  - "# Install the service"
  - "& $wrapperExec install"
  - "& $wrapperExec start"
profile::jenkinscontroller::jcasc:
  enabled: true
  reload_token: SuperSecretThatShouldBeEncryptedInProduction
  unclassified:
    data: |-
      buildDiscarders:
          configuredBuildDiscarders:
          - "jobBuildDiscarder"
          - defaultBuildDiscarder:
              discarder:
                logRotator:
                  numToKeepStr: "5"
  artifact-manager:
    data: |-
      unclassified:
        artifactManager:
          artifactManagerFactories:
          - jclouds:
              provider: "s3"
      aws:
        awsCredentials:
          credentialsId: "aws-s3-artifact-manager"
          region: "us-east-2"
        s3:
          container: "localhost-test-bucket"    # Resource defined in jenkins-infra/aws/<controller_hostname>.tf
          disableSessionToken: false            #
          prefix: "localhost/"                  # Rule of thumb: Controller's hostname
          useHttp: false                        # TLS for everyone \o/
          usePathStyleUrl: false                # For non AWS services only
          useTransferAcceleration: false        # Too expensive
  tools:
    groovy:
      groovy: # Default version is named "groovy"
        version: "2.4.7"
    jdk:
      jdk8:
        installers:
          linux-arm64:
            type: "zip"
            label: "linux && arm64"
            cpu_arch: "aarch64"
      jdk11:
        installers:
          linux-arm64:
            type: "zip"
            label: "linux && arm64"
            cpu_arch: "aarch64"
          s390x:
            type: "zip"
            label: "s390x"
            cpu_arch: "s390x"
      jdk17:
        installers:
          linux-arm64:
            type: "zip"
            label: "linux && arm64"
            cpu_arch: "aarch64"
          s390x:
            type: "zip"
            label: "s390x"
            cpu_arch: "s390x"
      jdk19:
        installers:
          linux-arm64:
            type: "zip"
            label: "linux && arm64"
            cpu_arch: "aarch64"
          s390x:
            type: "zip"
            label: "s390x"
            cpu_arch: "s390x"
  permanent_agents:
    s390x-agent:
      remoteFS: /home/jenkins/agent
      labels:
        - s390x
        - s390xdocker
      mode: EXCLUSIVE
      ssh:
        host: "148.100.84.76"
        credentialsId: "jenkins-s390x"
        hostKey: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIaGnnWz9Q/MvlscCUZslFxH8JJ01OQ6FXyuQMQWVuNe"
      envVars:
        PATH+MAVEN: "/home/jenkins/tools/apache-maven-3.8.7/bin"
        JAVA_HOME: "/opt/jdk-11"
      toolLocation:
        - home: "/home/jenkins/tools/apache-maven-3.8.7"
          key: "hudson.tasks.Maven$MavenInstallation$DescriptorImpl@mvn"
  cloud_agents:
    kubernetes:
      cik8s:
        enabled: true
        provider: "aws"
        credentialsId: "cik8s-jenkins-agent-sa-token"
        serverCertificate: SuperSecretThatShouldBeEncryptedInProduction
        max_capacity: 150 # Max 50 workers (16 CPU / 32 G) with 3 pods (3*4 CPU / 3*8G) each, minus the 30 of doks
        url: SuperSecretThatShouldBeEncyptedInProduction
        defaultNamespace: jenkins-agents
        agent_definitions:
          - name: jnlp-maven-bom
            imageName: jnlp-maven-all-in-one
            javaHome: /opt/jdk-17
            labels:
              - maven-bom
            cpus: 4
            memory: 8
            nodeSelector: "ci.jenkins.io/agents-density=3"
            tolerations:
              - key: "ci.jenkins.io/bom"
                operator: "Equal"
                value: "true"
                effect: "NoSchedule"
          - name: jnlp-maven-8
            imageName: jnlp-maven-all-in-one
            javaHome: /opt/jdk-8
            labels:
              - maven
              - maven-8
              - jdk8
            cpus: 4
            memory: 8
            imagePullSecrets: dockerhub-credential
          - name: jnlp-maven-11
            imageName: jnlp-maven-all-in-one
            javaHome: /opt/jdk-11
            labels:
              - maven-11
              - jdk11
            cpus: 4
            memory: 8
            imagePullSecrets: dockerhub-credential
          - name: jnlp-maven-17
            imageName: jnlp-maven-all-in-one
            javaHome: /opt/jdk-17
            labels:
              - maven-17
              - jdk17
            cpus: 4
            memory: 8
            imagePullSecrets: dockerhub-credential
          - name: jnlp-webbuilder
            agentJavaBin: java
            cpus: 2
            memory: 4
            labels:
              - node
              - webbuilder
              - ruby
            imagePullSecrets: dockerhub-credential
          - name: jnlp
            labels:
              - default
            cpus: 1
            memory: 1
            imagePullSecrets: dockerhub-credential
      doks:
        enabled: true
        provider: do
        credentialsId: "doks-jenkins-agent-sa-token"
        serverCertificate: SuperSecretThatShouldBeEncryptedInProduction
        max_capacity: 30 # Max 10 workers (16 CPU / 32 G) with 3 pods (3*4 CPU / 3*8G) each
        url: SuperSecretThatShouldBeEncryptedInProduction
        defaultNamespace: jenkins-agents
        # No agent definitions (to test an empty cloud)
    azure-vm-agents:
      azureCredentialsId: "azure-credentials"
      resource_group: ci-jenkins-io-ephemeral-agents
      maxInstances: 50 # Mandatory to set otherwise it's 10 by default. Worst case: 50 of 8 vCPUS = 400 which is the maximum quota
      agent_definitions:
        - name: "ubuntu-22"
          description: "Ubuntu 22.04 LTS"
          imageDefinition: jenkins-agent-ubuntu-22.04-amd64
          os: "ubuntu"
          os_version: "22.04"
          storageAccount: SuperSecretEncryptedInProduction
          location: "East US 2"
          instanceType: Standard_D4ads_v5 # 4 vCPUS / 16 Gb / Max 150 Gb local storage
          ephemeralOSDisk: true
          architecture: amd64
          labels:
            - ubuntu
            - java
            - linux
            - docker
            - linux-amd64
          maxInstances: 50
          useAsMuchAsPossible: true
          credentialsId: "jenkinsvmagents-userpass"
          usePrivateIP: true
          virtualNetworkName: "public-vnet"
          virtualNetworkResourceGroupName: "public"
          subnetName: "public-vnet-ci_jenkins_io_agents"
          spot: true
          initScript: *InboundAgentInitShellScript
        - name: "ubuntu-22-arm64"
          description: "Ubuntu 22.04 LTS ARM64"
          imageDefinition: jenkins-agent-ubuntu-22.04-arm64
          os: "ubuntu"
          os_version: "22.04"
          storageAccount: SuperSecretEncryptedInProduction
          location: "East US 2"
          instanceType: Standard_D4pds_v5 # 4 vCPUS / 16 Gb / Max 150 Gb local storage
          ephemeralOSDisk: true
          architecture: arm64
          labels:
            - ubuntu
            - arm64docker
            - arm64linux
          maxInstances: 50
          useAsMuchAsPossible: true
          credentialsId: "jenkinsvmagents-userpass"
          usePrivateIP: true
          virtualNetworkName: "public-vnet"
          virtualNetworkResourceGroupName: "public"
          subnetName: "public-vnet-ci_jenkins_io_agents"
          spot: true
          initScript: *InboundAgentInitShellScript
        - name: "ubuntu-22-highmem"
          description: "Ubuntu 22.04 LTS Highmem"
          imageDefinition: jenkins-agent-ubuntu-22.04-amd64
          os: "ubuntu"
          os_version: "22.04"
          storageAccount: SuperSecretEncryptedInProduction
          location: "East US 2"
          instanceType: Standard_D8ads_v5 # 8 vCPUS / 32 Gb
          ephemeralOSDisk: true
          architecture: amd64
          labels:
            - ubuntu
            - highmem
            - highram
            - docker-highmem
            - linux-amd64-big
          maxInstances: 50
          useAsMuchAsPossible: false
          usePrivateIP: true
          credentialsId: "jenkinsvmagents-userpass"
          virtualNetworkName: "public-vnet"
          virtualNetworkResourceGroupName: "public"
          subnetName: "public-vnet-ci_jenkins_io_agents"
          spot: true
          initScript: *InboundAgentInitShellScript
        - name: "win-2019" # The name must not contains "windows" or Azure API complains :facepalm:
          description: "Windows 2019"
          imageDefinition: jenkins-agent-windows-2019-amd64
          os: "windows"
          os_version: "2019"
          storageAccount: SuperSecretEncryptedInProduction
          location: "East US 2"
          instanceType: Standard_D4ads_v5 # 4 vCPUS / 16 Gb / Max 150 Gb local storage
          ephemeralOSDisk: true
          architecture: amd64
          labels:
            - docker-windows
            - docker-windows-2019
            - windows
          maxInstances: 50
          useAsMuchAsPossible: true
          credentialsId: "jenkinsvmagents-userpass"
          usePrivateIP: true
          virtualNetworkName: "public-vnet"
          virtualNetworkResourceGroupName: "public"
          subnetName: "public-vnet-ci_jenkins_io_agents"
          spot: true
          initScript: *InboundAgentInitPowershellScript
        - name: "win-2022" # The name must not contains "windows" or Azure API complains :facepalm:
          description: "Windows 2022"
          imageDefinition: jenkins-agent-windows-2022-amd64
          os: "windows"
          os_version: "2022"
          storageAccount: SuperSecretEncryptedInProduction
          location: "East US 2"
          instanceType: Standard_D4ads_v5 # 4 vCPUS / 16 Gb / Max 150 Gb local storage
          ephemeralOSDisk: true
          architecture: amd64
          labels:
            - docker-windows-2022
          maxInstances: 50
          useAsMuchAsPossible: true
          credentialsId: "jenkinsvmagents-userpass"
          usePrivateIP: true
          virtualNetworkName: "public-vnet"
          virtualNetworkResourceGroupName: "public"
          subnetName: "public-vnet-ci_jenkins_io_agents"
          spot: true
          initScript: *InboundAgentInitPowershellScript
    azure-container-agents:
      aci-windows:
        credentialsId: "azure-credentials"
        resource_group: eastus-cijenkinsio
        agent_definitions:
          - name: maven-8-windows
            os: windows
            command: 'pwsh.exe C:/ProgramData/Jenkins/jenkins-agent.ps1 -Url ^${rootUrl} -Secret ^${secret} -Name ^${nodeName}'
            cpus: 4
            memory: 8
            agentJavaBin: 'C:/openjdk-11/bin/java' # From image jenkins/inbound-agent:jdk11-nanoserver
            labels:
              - maven-windows
          - name: maven-11-windows
            os: windows
            command: 'pwsh.exe C:/ProgramData/Jenkins/jenkins-agent.ps1 -Url ^${rootUrl} -Secret ^${secret} -Name ^${nodeName}'
            cpus: 4
            memory: 8
            agentJavaBin: 'C:/openjdk-11/bin/java' # From image jenkins/inbound-agent:jdk11-nanoserver
            labels:
              - maven-11-windows
          - name: maven-17-windows
            os: windows
            command: 'pwsh.exe C:/ProgramData/Jenkins/jenkins-agent.ps1 -Url ^${rootUrl} -Secret ^${secret} -Name ^${nodeName}'
            cpus: 4
            memory: 8
            agentJavaBin: 'C:/openjdk-11/bin/java' # From image jenkins/inbound-agent:jdk11-nanoserver
            labels:
              - maven-17-windows
          - name: maven-19-windows
            os: windows
            command: 'pwsh.exe C:/ProgramData/Jenkins/jenkins-agent.ps1 -Url ^${rootUrl} -Secret ^${secret} -Name ^${nodeName}'
            cpus: 4
            memory: 8
            agentJavaBin: 'C:/openjdk-11/bin/java' # From image jenkins/inbound-agent:jdk11-nanoserver
            labels:
              - maven-19-windows
  artifact_caching_proxy:
    disabled: false
  datadog:
    host: "vagrant.local"
    targetHost: "172.18.0.1" # docker0 interface in vagrant is non standard (because docker in docker)
    collectBuildLogs: true
    emitConfigChangeEvents: true
# These are plugins we need in our ci environment
profile::jenkinscontroller::plugins:
  - ansicolor
  - artifact-manager-s3 # Store Artifact and stashes in AWS S3 (instead of the VM JENKINS_HOME directory)
  - azure-container-agents
  - azure-vm-agents
  - blueocean
  - build-timeout
  - buildtriggerbadge
  - build-discarder # Remove older builds if no policy defined - https://github.com/jenkins-infra/helpdesk/issues/3495
  - cloudbees-folder
  - code-coverage-api
  - config-file-provider
  - configuration-as-code
  - credentials
  - credentials-binding
  - datadog
  - docker-workflow
  - embeddable-build-status
  - git-client
  - git
  - github
  - github-checks
  - github-branch-source
  - groovy
  - kubernetes
  - jobConfigHistory
  - junit-attachments
  - junit-realtime-test-reporter
  - ldap
  - lockable-resources
  - mailer
  - matrix-auth
  - parallel-test-executor
  - pipeline-githubnotify-step
  - pipeline-graph-view
  - pipeline-stage-view
  - pipeline-utility-steps
  - ssh-agent # SSH Agent to allow loading SSH credentials on a local agent for jobs
  - ssh-slaves # SSH Build Agent to implement "outbound agents"
  - throttle-concurrents
  - timestamper
  - toolenv
  - warnings-ng
  - workflow-aggregator
  - workflow-multibranch
