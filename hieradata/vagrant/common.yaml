---
lookup_options:
  "^profile::jenkinscontroller::jcasc$":
    merge:
      strategy: deep
      merge_hash_arrays: true
  "^letsencrypt":
    merge:
      strategy: deep
      merge_hash_arrays: true

profile::jenkinscontroller::letsencrypt: false
profile::jenkinscontroller::ci_fqdn: 'localhost'
profile::jenkinscontroller::ci_resource_domain: 'assets.localhost'
profile::jenkinscontroller::proxy_port: 443
profile::jenkinscontroller::groovy_init_enabled: false
profile::jenkinscontroller::memory_limit: '14g'
profile::jenkinscontroller::jcasc:
  enabled: true
  reload_token: SuperSecretThatShouldBeEncryptedInProduction
  tools:
    groovy:
      groovy: # Default version is named "groovy"
        version: "2.4.7"
    jdk:
      jdk8:
        installers:
          linux-arm64:
            type: "zip"
            label: "linux && arm64"
            cpu_arch: "aarch64"
      jdk11:
        installers:
          linux-arm64:
            type: "zip"
            label: "linux && arm64"
            cpu_arch: "aarch64"
          s390x:
            type: "zip"
            label: "s390x"
            cpu_arch: "s390x"
      jdk17:
        installers:
          linux-arm64:
            type: "zip"
            label: "linux && arm64"
            cpu_arch: "aarch64"
          s390x:
            type: "zip"
            label: "s390x"
            cpu_arch: "s390x"
      jdk19:
        installers:
          linux-arm64:
            type: "zip"
            label: "linux && arm64"
            cpu_arch: "aarch64"
          s390x:
            type: "zip"
            label: "s390x"
            cpu_arch: "s390x"
  permanent_agents:
    s390x-agent:
      remoteFS: /home/jenkins/agent
      labels:
        - s390x
        - s390xdocker
      mode: EXCLUSIVE
      ssh:
        host: "148.100.84.76"
        credentialsId: "jenkins-s390x"
        hostKey: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIaGnnWz9Q/MvlscCUZslFxH8JJ01OQ6FXyuQMQWVuNe"
      envVars:
        PATH+MAVEN: "/home/jenkins/tools/apache-maven-3.8.7/bin"
        JAVA_HOME: "/opt/jdk-11"
      toolLocation:
        - home: "/home/jenkins/tools/apache-maven-3.8.7"
          key: "hudson.tasks.Maven$MavenInstallation$DescriptorImpl@mvn"
  cloud_agents:
    kubernetes:
      cik8s:
        enabled: true
        provider: "aws"
        credentialsId: "cik8s-jenkins-agent-sa-token"
        serverCertificate: SuperSecretThatShouldBeEncryptedInProduction
        max_capacity: 120 # Max 50 workers (16 CPU / 32 G) with 3 pods (3*4 CPU / 3*8G) each, minus the 30 of doks
        url: SuperSecretThatShouldBeEncryptedInProduction
        agent_definitions:
          - name: jnlp-maven-8
            imageName: jnlp-maven-all-in-one
            javaHome: /opt/jdk-8
            labels:
              - maven
              - maven-8
              - jdk8
            cpus: 4
            memory: 8
            imagePullSecrets: dockerhub-credential
          - name: jnlp-maven-11
            imageName: jnlp-maven-all-in-one
            javaHome: /opt/jdk-11
            labels:
              - maven-11
              - jdk11
            cpus: 4
            memory: 8
            imagePullSecrets: dockerhub-credential
          - name: jnlp-maven-17
            imageName: jnlp-maven-all-in-one
            javaHome: /opt/jdk-17
            labels:
              - maven-17
              - jdk17
            cpus: 4
            memory: 8
            imagePullSecrets: dockerhub-credential
          - name: jnlp-webbuilder
            agentJavaBin: java
            cpus: 2
            memory: 4
            labels:
              - node
              - webbuilder
              - ruby
            imagePullSecrets: dockerhub-credential
          - name: jnlp
            labels:
              - default
            cpus: 1
            memory: 1
            imagePullSecrets: dockerhub-credential
      doks:
        enabled: true
        provider: do
        credentialsId: "doks-jenkins-agent-sa-token"
        serverCertificate: SuperSecretThatShouldBeEncryptedInProduction
        max_capacity: 30 # Max 10 workers (16 CPU / 32 G) with 3 pods (3*4 CPU / 3*8G) each
        url: SuperSecretThatShouldBeEncryptedInProduction
        agent_definitions:
          - name: jnlp-maven-8
            imageName: jnlp-maven-all-in-one
            javaHome: /opt/jdk-8
            labels:
              - maven
              - maven-8
              - jdk8
            cpus: 4
            memory: 8
            imagePullSecrets: dockerhub-credential
          - name: jnlp-maven-11
            imageName: jnlp-maven-all-in-one
            javaHome: /opt/jdk-11
            labels:
              - maven-11
              - jdk11
            cpus: 4
            memory: 8
            imagePullSecrets: dockerhub-credential
          - name: jnlp-maven-17
            imageName: jnlp-maven-all-in-one
            javaHome: /opt/jdk-17
            labels:
              - maven-17
              - jdk17
            cpus: 4
            memory: 8
            imagePullSecrets: dockerhub-credential
          - name: jnlp-maven-19
            imageName: jnlp-maven-all-in-one
            javaHome: /opt/jdk-19
            labels:
              - maven-19
              - jdk19
            cpus: 4
            memory: 8
            imagePullSecrets: dockerhub-credential
          - name: jnlp-webbuilder
            agentJavaBin: java
            cpus: 2
            memory: 4
            labels:
              - node
              - webbuilder
              - ruby
            imagePullSecrets: dockerhub-credential
          - name: jnlp
            labels:
              - default
            cpus: 1
            memory: 1
            imagePullSecrets: dockerhub-credential
    ec2:
      aws-us-east-2:
        region: us-east-2
        credentialsId: "aws-credentials-jenkins-ci"
        sshKeysCredentialsId: "ec2-agent-ssh-2021-06"
        agent_definitions:
          - description: "Ubuntu 20.04 LTS"
            maxInstances: 20
            instanceType: T3Xlarge # 4 vCPUs / 16 Gb
            os: "ubuntu"
            os_version: "20.04"
            architecture: "amd64"
            labels:
              - java
              - docker
              - linux
              - linux-amd64
            useAsMuchAsPossible: true
            spot: true
            userData: &BootstrapDatadogScript
              - "#!/bin/bash"
              - "set -eux"
              - echo "START CLOUDINIT"
              - "sed 's/api_key:.*/api_key: SuperSecretThatShouldBeEncryptedInProduction/' /etc/datadog-agent/datadog.yaml.example > /etc/datadog-agent/datadog.yaml"
              - "sed -i 's/# site:.*/site: datadoghq.com/' /etc/datadog-agent/datadog.yaml"
              - systemctl stop datadog-agent.service
              - mkdir -p /var/log/datadog /etc/datadog-agent
              - chown dd-agent:dd-agent /etc/datadog-agent/datadog.yaml
              - chmod 640 /etc/datadog-agent/datadog.yaml
              - chown dd-agent:dd-agent /var/log/datadog
              - chmod 770 /var/log/datadog
              - systemctl start datadog-agent.service
              - rm -f /etc/sudoers.d/90-cloud-init-users
              - echo "END CLOUDINIT"
          - description: "Windows 2019"
            maxInstances: 10
            instanceType: T3Xlarge # 4 vCPUs / 16 Gb
            os: "windows"
            os_version: "2019"
            architecture: "amd64"
            labels:
              - docker-windows
              - docker-windows-2019
            useAsMuchAsPossible: true
            spot: false
            userData:
              #this script is ran before the agent service startup so no need to restart it
              - <powershell>
              - "(Get-Content C:\\ProgramData\\Datadog\\datadog.yaml -Raw) -Replace 'api_key:', 'api_key: SuperSecretThatShouldBeEncryptedInProduction' | Set-Content C:\\ProgramData\\Datadog\\datadog.yaml"
              - </powershell>
          - description: "Windows 2022"
            maxInstances: 10
            instanceType: T3Xlarge # 4 vCPUs / 16 Gb
            os: "windows"
            os_version: "2022"
            architecture: "amd64"
            labels:
              - docker-windows-2022
              - windows-2022
            useAsMuchAsPossible: true
            spot: false
            userData:
              #this script is ran before the agent service startup so no need to restart it
              - <powershell>
              - "(Get-Content C:\\ProgramData\\Datadog\\datadog.yaml -Raw) -Replace 'api_key:', 'api_key: SuperSecretThatShouldBeEncryptedInProduction' | Set-Content C:\\ProgramData\\Datadog\\datadog.yaml"
              - </powershell>
          - description: "High memory ubuntu 20.04 (ondemand)"
            maxInstances: 50
            instanceType: M54xlarge # 16 vCPUS / 64 Gb
            os: "ubuntu"
            os_version: "20.04"
            architecture: "amd64"
            labels:
              - highmem
              - highram
              - docker-highmem
              - linux-amd64-big
            useAsMuchAsPossible: false
            spot: false
            userData: *BootstrapDatadogScript
          - description: "ARM64 ubuntu 20.04"
            maxInstances: 5
            instanceType: A1Xlarge # 4 vCPUs / 8 Gb
            os: "ubuntu"
            os_version: "20.04"
            architecture: "arm64"
            labels:
              - arm64docker
              - arm64linux
            useAsMuchAsPossible: false
            spot: true
            userData: *BootstrapDatadogScript
    azure-vm-agents:
      azureCredentialsId: "azure-credentials"
      resource_group: eastus-cijenkinsio
      agent_definitions:
        - name: "ubuntu-20"
          description: "Ubuntu 20.04 LTS"
          imageDefinition: jenkins-agent-ubuntu-20.04
          os: "ubuntu"
          storageAccount: SuperSecretThatShouldBeEncryptedInProduction
          location: "East US 2"
          instanceType: Standard_D4s_v3 # 4 vCPUS / 16 Gb
          architecture: amd64
          labels:
            - java
            - linux
            - docker
            - linux-amd64
          maxInstances: 10
          useAsMuchAsPossible: true
          credentialsId: "jenkinsvmagents-userpass"
          usePrivateIP: true
          virtualNetworkName: "prod-jenkins-public-prod"
          virtualNetworkResourceGroupName: "prod-jenkins-public-prod"
          subnetName: "ci.j-agents-vm"
          spot: true
          initScript: *BootstrapDatadogScript
        - name: "ubuntu-20-highmem"
          description: "Ubuntu 20.04 LTS Highmem"
          imageDefinition: jenkins-agent-ubuntu-20.04
          os: "ubuntu"
          storageAccount: SuperSecretThatShouldBeEncryptedInProduction
          location: "East US 2"
          instanceType: Standard_D16s_v3 # 16 vCPUS / 64 Gb
          architecture: amd64
          labels:
            - highmem
            - highram
            - docker-highmem
            - linux-amd64-big
          maxInstances: 20
          useAsMuchAsPossible: false
          usePrivateIP: true
          credentialsId: "jenkinsvmagents-userpass"
          virtualNetworkName: "prod-jenkins-public-prod"
          virtualNetworkResourceGroupName: "prod-jenkins-public-prod"
          subnetName: "ci.j-agents-vm"
          spot: false
          initScript: *BootstrapDatadogScript
        - name: "win-2019" # The name must not contains "windows" or Azure API complains :facepalm:
          description: "Windows 2019"
          imageDefinition: jenkins-agent-windows-2019
          os: "windows"
          storageAccount: SuperSecretThatShouldBeEncryptedInProduction
          location: "East US 2"
          instanceType: Standard_D4s_v3 # 4 vCPUS / 16 Gb
          architecture: amd64
          labels:
            - docker-windows
          maxInstances: 20
          useAsMuchAsPossible: true
          credentialsId: "jenkinsvmagents-userpass"
          usePrivateIP: true
          virtualNetworkName: "prod-jenkins-public-prod"
          virtualNetworkResourceGroupName: "prod-jenkins-public-prod"
          subnetName: "ci.j-agents-vm"
          spot: false
          initScript:
            - "(Get-Content C:\\ProgramData\\Datadog\\datadog.yaml -Raw) -Replace 'api_key:', 'api_key: SuperSecretThatShouldBeEncryptedInProduction' | Set-Content C:\\ProgramData\\Datadog\\datadog.yaml"
        - name: "win-2022" # The name must not contains "windows" or Azure API complains :facepalm:
          description: "Windows 2022"
          imageDefinition: jenkins-agent-windows-2022
          os: "windows"
          os_version: "2022"
          storageAccount: SuperSecretThatShouldBeEncryptedInProduction
          location: "East US 2"
          instanceType: Standard_D4s_v3 # 4 vCPUS / 16 Gb
          architecture: amd64
          labels:
            - docker-windows-2022
          maxInstances: 20
          useAsMuchAsPossible: false
          credentialsId: "jenkinsvmagents-userpass"
          usePrivateIP: true
          virtualNetworkName: "prod-jenkins-public-prod"
          virtualNetworkResourceGroupName: "prod-jenkins-public-prod"
          subnetName: "ci.j-agents-vm"
          spot: false
          initScript:
            - "(Get-Content C:\\ProgramData\\Datadog\\datadog.yaml -Raw) -Replace 'api_key:', 'api_key: SuperSecretThatShouldBeEncryptedInProduction' | Set-Content C:\\ProgramData\\Datadog\\datadog.yaml"
    azure-container-agents:
      aci-windows:
        credentialsId: "azure-credentials"
        resource_group: eastus-cijenkinsio
        agent_definitions:
          - name: maven-8-windows
            os: windows
            command: 'pwsh.exe C:/ProgramData/Jenkins/jenkins-agent.ps1 -Url ^${rootUrl} -Secret ^${secret} -Name ^${nodeName}'
            cpus: 4
            memory: 8
            agentJavaBin: 'C:/openjdk-11/bin/java' # From image jenkins/inbound-agent:jdk11-nanoserver
            labels:
              - maven-windows
          - name: maven-11-windows
            os: windows
            command: 'pwsh.exe C:/ProgramData/Jenkins/jenkins-agent.ps1 -Url ^${rootUrl} -Secret ^${secret} -Name ^${nodeName}'
            cpus: 4
            memory: 8
            agentJavaBin: 'C:/openjdk-11/bin/java' # From image jenkins/inbound-agent:jdk11-nanoserver
            labels:
              - maven-11-windows
          - name: maven-17-windows
            os: windows
            command: 'pwsh.exe C:/ProgramData/Jenkins/jenkins-agent.ps1 -Url ^${rootUrl} -Secret ^${secret} -Name ^${nodeName}'
            cpus: 4
            memory: 8
            agentJavaBin: 'C:/openjdk-11/bin/java' # From image jenkins/inbound-agent:jdk11-nanoserver
            labels:
              - maven-17-windows
          - name: maven-19-windows
            os: windows
            command: 'pwsh.exe C:/ProgramData/Jenkins/jenkins-agent.ps1 -Url ^${rootUrl} -Secret ^${secret} -Name ^${nodeName}'
            cpus: 4
            memory: 8
            agentJavaBin: 'C:/openjdk-11/bin/java' # From image jenkins/inbound-agent:jdk11-nanoserver
            labels:
              - maven-19-windows
  artifact_caching_proxy:
    disabled: false
# These are plugins we need in our ci environment
profile::jenkinscontroller::plugins:
  - ansicolor
  - azure-container-agents
  - azure-vm-agents
  - blueocean
  - build-timeout
  - buildtriggerbadge
  - cloudbees-folder
  - code-coverage-api
  - config-file-provider
  - configuration-as-code
  - credentials
  - credentials-binding
  - docker-workflow
  - ec2
  - embeddable-build-status
  - git-client
  - git
  - github
  - github-checks
  - github-branch-source
  - groovy
  - kubernetes
  - jobConfigHistory
  - junit-attachments
  - junit-realtime-test-reporter
  - ldap
  - lockable-resources
  - mailer
  - matrix-auth
  - parallel-test-executor
  - pipeline-githubnotify-step
  - pipeline-graph-view
  - pipeline-stage-view
  - pipeline-utility-steps
  - ssh-agent # SSH Agent to allow loading SSH credentials on a local agent for jobs
  - ssh-slaves # SSH Build Agent to implement "outbound agents"
  - throttle-concurrents
  - timestamper
  - toolenv
  - warnings-ng
  - workflow-aggregator
  - workflow-multibranch
